# my-workflow.yml
# 需求说明：每次当前仓库/js/mylib/路径下的js文件提交修改时，将修改的文件的文件名中的t=YYYYMMddhhmm这一部分替换为最新的北京时间，
# 例如mylib&t=202502161348.js就替换为mylib&t=202503201111.js，时间只是举例，必须基于当前生成的真实北京时间。
# 新增功能：判断js文件的开头，判断方法是先移除文件名的&t=及其之后的所有内容，留下来的内容就是开头。
# 例如mylib&t=202502161348.js的开头就是mylib。
# 用上面的判断开头的方法，判断js/mylib/路径下有几个以mylib开头的js文件，
# 如果mylib开头的js文件小于4个，就预先复制一份原始文件（例如mylib&t=202502161348.js）到当前路径下，
# 然后新增一个修改后的重命名的最新的文件（例如mylib&t=202502270010.js）。
# 然后再次判断js/mylib/路径下有几个以mylib开头的js文件，如果文件超过3个，
# 则自动删除日期最旧的一个js文件（例如mylib&t=202502161348.js），
# 保持mylib开头的js文件的数量不超过3。如果在 js/mylib/路径下遇到以其他内容开头的js文件（例如tt&t=202502270010.js），也同上操作。

name: Update JS Filename Timestamp

on:
  push:
    paths:
      - 'js/mylib/*.js'  # 当js/mylib/路径下的js文件有提交修改时触发工作流

jobs:
  update-timestamp:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # 检出代码到工作区

      - name: Generate Beijing Time
        id: beijing-time
        run: |
          # 获取当前北京时间并格式化为YYYYMMddhhmm
          BEIJING_TIME=$(TZ='Asia/Shanghai' date +'%Y%m%d%H%M')
          echo "::set-output name=time::$BEIJING_TIME"  # 将北京时间输出到步骤输出中

      - name: 拷贝原始文件
        run: |
          # 获取北京时间
          BEIJING_TIME="${{ steps.beijing-time.outputs.time }}"
          # 遍历js/mylib/路径下的所有js文件
          for file in js/mylib/*.js; do
            # 提取文件名开头
            prefix=$(basename "$file" | sed 's/&t=.*//')
            # 统计以该前缀开头的文件数量
            file_count=$(ls js/mylib/"$prefix"&t=*.js 2>/dev/null | wc -l)

            if [ $file_count -lt 4 ]; then
              # 复制原始文件
              cp "$file" "$file.copy"
              echo "已将 $file 复制到 $file.copy"
            fi
          done

      - name: 新增文件
        run: |
          # 获取北京时间
          BEIJING_TIME="${{ steps.beijing-time.outputs.time }}"
          # 遍历js/mylib/路径下的所有js文件
          for file in js/mylib/*.js; do
            if [[ $file =~ (.*t=)[0-9]{12}(.*) ]]; then
              # 提取文件名中需要替换的部分
              new_file="${BASH_REMATCH[1]}${BEIJING_TIME}${BASH_REMATCH[2]}"
              # 重命名文件
              mv "$file" "$new_file"
              echo "已将 $file 重命名为 $new_file"
            fi
          done

      - name: 控制文件数目(删除旧文件)
        run: |
          # 获取北京时间
          BEIJING_TIME="${{ steps.beijing-time.outputs.time }}"
          # 遍历js/mylib/路径下的所有js文件
          for file in js/mylib/*.js; do
            # 提取文件名开头
            prefix=$(basename "$file" | sed 's/&t=.*//')
            # 再次统计以该前缀开头的文件数量
            file_count=$(ls js/mylib/"$prefix"&t=*.js 2>/dev/null | wc -l)
            echo "即将删除文件"
            if [ $file_count -gt 3 ]; then
              # 计算需要删除的文件数量
              files_to_delete=$((file_count - 3))
              # 按文件名中的时间戳排序，找到最旧的文件进行删除
              files_to_remove=$(ls js/mylib/"$prefix"&t=*.js | sed 's/.*&t=\([0-9]\{12\}\)\.js/\1 &/' | sort -n | head -n $files_to_delete | cut -d' ' -f2)
              for old_file in $files_to_remove; do
                if [ -n "$old_file" ]; then
                  # 检查文件权限，可根据实际情况调整权限修改逻辑
                  chmod +w "$old_file"
                  rm "$old_file"
                  echo "已删除最旧的文件: $old_file"
                else
                  echo "未找到要删除的最旧文件。"
                fi
              done
            fi
          done

      - name: Commit and Push Changes
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add js/mylib/*.js
          if git diff --staged --quiet; then
            echo "没有需要提交的更改。"
          else
            git commit -m "Update JS filenames with current Beijing time and manage file count"
            git push
          fi
